Updated TODO list, 6/15/22, everything below the line is useless

Now that I have a working ray pooling system, I want to take a crack at wavefront path tracing, but path tracing itself is an algorithm that is easy to make mistakes and have hidden bugs. For that reason, I will start off with ray tracing shadows, and then I will eventually modify my algorithm into a path tracer
But even then, path tacer and even just shadows are a ways off. IF anything, I need to optimize before moving on (that's excluding the massive refactoring of variable names and cleaning up code that I still need to do)
But as I type, I wonder if optimizations are really that important. I don't want to spend all summer sitting on this project at the basic stuff, nor do I want impatience to blind me

By the way, code rewrites can always be postponed, it is given that I will eventually rewrite the portions that I am working on (which actually matter) so as I code I can also refactor

Here's what I will do: 
- Thursday and Friday are reading days for efficent BVH traversal
- Saturday and Sunday are implementing them

On Monday I will move on to shadow ray tracing and may go for whitted style ray tacing via path tracing

goals:
- Reorganize shader code
- Properly seperate kernels

=================================================================
Haha, time flies, right? Since I'm visiting this project after a year, everything below the line goes in the garbage until I can clear my mind about what to do.

TODO LIST:
- Get to know my project again
- REWRITE AND REORGANIZE EVERYTHING!!!!!
- Fix bugs and whatnot

My vision for this project is getting a proper path tracer up and running only within OpenGL by next summer. 

For reorganizing, I can follow the GLSL-PathTracer repo. What they did was organizing the project like this
|-res
||-folder for object 1
|||-object file and textures
||-folder for object 2
|||-object file and textures
||-folder for object N
|||-object file and textures
|-extern
||-usual dependencies
|-src
||-Main.cpp
||-Rendering folder
||-Math folder
||-Misc folder

The main part is the src folder. A global Main.cpp file takes care of high level stuff, like window and GUI
It then proceeds to call a renderer object, which takes control of everything
So for example, the per frame render() function in main.cpp was simply just a call renderer->render() then a few high level opengl commands to present
This entire organization makes it very easy to understand the code, albiet a bit of commenting is needed (but also unncessary)

Naming convention wise, I am finally going to give up NamingEveryVariableLikeThis because it becomes hard to discern between functions, types, and variables
I will now move onto namingVariablesLikeThis. While mixed case looks ugly, it certainly is better than my NotWidelyUsedFormat and hellala lot better than mVarName or VarName_ like how google does it

DONE!!!!!: I will rename all the folders in extern to the normal project names instead of capitalizing everything (GLFW vs glfw)
I really one day need to learn how to properly include external projects instead of compiling by source through a submodule

I need to clean up the res folder instead of having many useless things laying around

Finally, an important bit. I'm giving up my weird obbsession with trying to support old hardware. 
I would often limit myself to OpenGL 3.3 and sometimes even thing of staying at 2.0 just for a little bit more hardware support
But now, it is 2022. Literally anything that doesn't belong in a dumpster runs all the new fancy APIs and OpenGL versions.
I think 4.5 is good enough for my features, but I will not hesitate jumping over to 4.6 if I need something or using a not-so-widely used (but still not vendor specifc) extension
What this means is that I am going to throw buffer textures out the window and begin using buffer objects
Overall, I will rewrite the opengl stuff to not be an API covering everything up and replacing it with my own layer, but as an actual application where certain duties are divided up accordingly
If you think about it, the only place you would want to completely cover up the API is when you want to add multiple API support to say, a game engine
Here I am staying down to earth and will implement with one API
No more unnessary abstraction. No more OCD.

I also really need to clean up my shaders folder. Once again, the GLSL path tracer project comes in hand. 
The shader folder is directly full of kernels, and a subfolder called "common" contains shared stuff like the RNG library

Here's my plan of attack:
- DONE: rename submodules because it is easiest
- Done: Clean res folder of useless junk (or organize it)
- Done: Move it outside of the src folder (might need to change debugging directory)
- Done?: *Reorganize sources folder, this includes a rewrite
- Doneish: Clean up of junk code and proper placement of comments
- Finish rewriting variable names
- Hopefullly I will be done by here!

*Now for the remaining tasks:
If we look to the GLSL path tracer, there are really just 3 folders:
1. The rendering stuff, where the meat of the code is
2. Math stuff, which contains basically the transform class and nothing more
3. Loading stuff, which I don't need since I don't require an over-the-top loader yet and assimp will suffice
If we look at my case, I have the odd stuff the GLSL path tracer doesn't have, such as a timer file, window, etc.
It would probably be better to have three folders: "core", "math", and "misc"

After my plan of attack, what I will do is:
- Fix my BVH traversal, reading the stackless paper "Efficient Stack-less BVH Traversal for Ray Tracing" gave me ideas, even though the authors stated the algorithm was slower than the stacked traversal

------------------------------------------------------------------------

This is the todo list

Things I need to do:
- DONE: Create a CPU side controlled camera with adjustable perspectivity 
- DONE: Allow that camera to move and look around
- DONE: Replace the ray-sphere intersection with a ray-triangle intersection
- DONE: Send the triangles to the shader using a SSBO or texture
- DONE: Dynamically load the triangles with ASSIMP
- DONE: Bounding volumes
- DONE: Bounding volume hierarchies 
- DONE: Texturing
- Better BVH building and traversal
- Wavefront ray tracing
- Scene loading
- Scene management system
- Monte carlo path tracing
- Post processing
- PARTIALLY DONE: Physically based rendering
- Importance sampling
- Multiple importance samping

Issues that I need to fix:
- FIXED: Ray triangle intersection and hidden surface removal is broken

Things I should do but don't need to:
- Fix OpenGL abstraction issues
- DONE: Add GLSL include directory functionality 
- Fix memory leaks and OpenGL resource "leaks" after the program exits

Things maybe I should do:
- Move to watertight triangle intersection