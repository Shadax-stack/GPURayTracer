#version 430

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

uniform layout(rgba16f) writeonly image2D ColorOutput;

struct CameraParameters {
    vec3 Corner[2][2];

    vec3 Position;
};

uniform CameraParameters Camera;

vec3 ComputeRayDirection(vec2 UV){

    vec3 Direction;

    vec3 Y[2];

    Y[0] = mix(Camera.Corner[0][0], Camera.Corner[0][1], UV.x);
    Y[1] = mix(Camera.Corner[1][0], Camera.Corner[1][1], UV.x);

    Direction = mix(Y[0], Y[1], UV.y);

    Direction = normalize(Direction);

    return Direction;
}

// Sky by builderboy
vec3 ComputeIncomingRadiance(const vec3 Direction) {
	float UpDot = dot(Direction, vec3(0.0f, 1.0f, 0.0f));
	const vec3 Coefficients = vec3(0.0625, 0.125, 0.25);
	vec3 Color = Coefficients / (UpDot * UpDot + Coefficients);
	return Color;
}

struct Vertex {
    vec3 Position;
    vec3 Normal;
    vec2 TextureCoordinate;
};

// Workaround for vec4 alignment
struct PackedVertex {
    // Position xyz, normal x
    vec4 PN;
    // Normal yz, tex coord xy
    vec4 NT;
};

Vertex UnpackVertex(PackedVertex PV) {
    Vertex UnpackedVertex;

    UnpackedVertex.Position = PV.PN.xyz;

    UnpackedVertex.Normal.x  = PV.PN.w;
    UnpackedVertex.Normal.yz = PV.NT.xy;

    UnpackedVertex.TextureCoordinate = PV.NT.zw;

    return UnpackedVertex;
}

struct Triangle {
    Vertex[3] Vertices;
};

struct Ray {
    vec3 Origin;
    vec3 Direction;
};

struct VertexInterpolationInfo {
    float U, V;
};

struct TriangleHitInfo {
    Triangle IntersectedTriangle;
    VertexInterpolationInfo InterpolationInfo;
};

struct HitInfo {
    float Depth;
    TriangleHitInfo TriangleHitInfo;
};

struct TriangleIndexData {
    uint Indices[3];
};

layout(std430) readonly buffer VertexBuffer {
    PackedVertex BufferVertices[];
};

layout(std430) readonly buffer IndexBuffer {
    TriangleIndexData BufferElements[];
};

bool IntersectTriangle(in Triangle Triangle, in Ray Ray, inout HitInfo Hit) {
    // this is mostly a copy paste from scratchapixel's code that has been refitted to work with GLSL

    TriangleHitInfo TmpTriangleHitInfo;
    TmpTriangleHitInfo.IntersectedTriangle = Triangle;

    vec3 V01 = Triangle.Vertices[1].Position.xyz - Triangle.Vertices[0].Position.xyz;
    vec3 V02 = Triangle.Vertices[2].Position.xyz - Triangle.Vertices[0].Position.xyz;

    vec3 Pvec = cross(Ray.Direction, V02);

    float det = dot(V01, Pvec);

    const float Epsilon = 1e-6f;
    if ((det) < Epsilon) {
        return false;
    }

    float invDet = 1.0f / det;

    vec3 Tvec = Ray.Origin - Triangle.Vertices[0].Position;
    TmpTriangleHitInfo.InterpolationInfo.U = dot(Tvec, Pvec) * invDet;
    if (TmpTriangleHitInfo.InterpolationInfo.U < 0 || TmpTriangleHitInfo.InterpolationInfo.U > 1) return false;

    vec3 Qvec = cross(Tvec, V01);
    TmpTriangleHitInfo.InterpolationInfo.V = dot(Ray.Direction, Qvec) * invDet;
    if (TmpTriangleHitInfo.InterpolationInfo.V < 0 || TmpTriangleHitInfo.InterpolationInfo.U + TmpTriangleHitInfo.InterpolationInfo.V  > 1) return false;

    float t = dot(V02, Qvec) * invDet;

    if (t < Hit.Depth) {
        Hit.Depth = t;
        Hit.TriangleHitInfo = TmpTriangleHitInfo;
        return true;
    } else {
        return false;
    }
}

Vertex GetInterpolatedVertex(in HitInfo Intersection) {
    Vertex InterpolatedVertex;

    // I should precompute 1 - U - V

    InterpolatedVertex.Position =

    	Intersection.TriangleHitInfo.IntersectedTriangle.Vertices[1].Position * Intersection.TriangleHitInfo.InterpolationInfo.U +
		Intersection.TriangleHitInfo.IntersectedTriangle.Vertices[2].Position  * Intersection.TriangleHitInfo.InterpolationInfo.V +
		Intersection.TriangleHitInfo.IntersectedTriangle.Vertices[0].Position  * (1.0f - Intersection.TriangleHitInfo.InterpolationInfo.U - Intersection.TriangleHitInfo.InterpolationInfo.V)

	;

    InterpolatedVertex.Normal =

    	Intersection.TriangleHitInfo.IntersectedTriangle.Vertices[1].Normal  * Intersection.TriangleHitInfo.InterpolationInfo.U +
		Intersection.TriangleHitInfo.IntersectedTriangle.Vertices[2].Normal  * Intersection.TriangleHitInfo.InterpolationInfo.V +
		Intersection.TriangleHitInfo.IntersectedTriangle.Vertices[0].Normal  * (1.0f - Intersection.TriangleHitInfo.InterpolationInfo.U - Intersection.TriangleHitInfo.InterpolationInfo.V)

	;

    InterpolatedVertex.TextureCoordinate =

    	Intersection.TriangleHitInfo.IntersectedTriangle.Vertices[1].TextureCoordinate  * Intersection.TriangleHitInfo.InterpolationInfo.U +
		Intersection.TriangleHitInfo.IntersectedTriangle.Vertices[2].TextureCoordinate  * Intersection.TriangleHitInfo.InterpolationInfo.V +
		Intersection.TriangleHitInfo.IntersectedTriangle.Vertices[0].TextureCoordinate  * (1.0f - Intersection.TriangleHitInfo.InterpolationInfo.U - Intersection.TriangleHitInfo.InterpolationInfo.V)

	;

    InterpolatedVertex.Normal = normalize(InterpolatedVertex.Normal);

    return InterpolatedVertex;
}

vec3 ComputeColor(in vec2 PixelCoordinates){
    vec2 ScreenCoordinates = PixelCoordinates / vec2(gl_WorkGroupSize.xy * gl_NumWorkGroups.xy);

	vec3 Color = vec3(0.0f);

    Ray PrimaryRay;

    PrimaryRay.Origin = Camera.Position;
    PrimaryRay.Direction = ComputeRayDirection(ScreenCoordinates);

    HitInfo IntersectionInfo;

    IntersectionInfo.Depth = 100000.0f;

    bool HitResult = false;

    for(uint TriangleIndex = 0; TriangleIndex < BufferElements.length(); TriangleIndex++) {
    //break;
        // Assemble the triangle

        TriangleIndexData CurrentIndexData = BufferElements[TriangleIndex];

        Triangle CurrentTriangle;

        CurrentTriangle.Vertices[0] = UnpackVertex(BufferVertices[CurrentIndexData.Indices[0]]);
        CurrentTriangle.Vertices[1] = UnpackVertex(BufferVertices[CurrentIndexData.Indices[1]]);
        CurrentTriangle.Vertices[2] = UnpackVertex(BufferVertices[CurrentIndexData.Indices[2]]);

        HitResult = HitResult || IntersectTriangle(CurrentTriangle, PrimaryRay, IntersectionInfo);
    }

    #if 0
    Triangle TestTriangle;

    TestTriangle.Vertices[0].Position.xyz = vec3(-1.0f + 5.0f, -1.0f + 5.0f, -10.0f);
    TestTriangle.Vertices[1].Position.xyz = vec3( 1.0f + 5.0f, -1.0f + 5.0f, -10.0f);
    TestTriangle.Vertices[2].Position.xyz = vec3( 0.0f + 5.0f,  1.0f + 5.0f, -10.0f);

    HitResult = HitResult || IntersectTriangle(TestTriangle, PrimaryRay, IntersectionInfo);
    #endif

    if(HitResult) {
        Color = vec3(0.0f);

        Vertex InterpolatedVertex = GetInterpolatedVertex(IntersectionInfo);

        Color = InterpolatedVertex.Normal * 0.5f + 0.5f;
    } else {
        Color = ComputeIncomingRadiance(PrimaryRay.Direction);
    }

	return Color;
}

void main(){
	uvec2 PixelCoordinates = gl_GlobalInvocationID.xy;
    ivec2 StoreLocation = ivec2(PixelCoordinates);

    vec3 Color = ComputeColor(PixelCoordinates);

	imageStore(ColorOutput, StoreLocation, vec4(Color, 0.0f));
}