#version 430

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

uniform layout(rgba16f) writeonly image2D ColorOutput;

#include "../../shading/BRDF.glsl"
#include "../../shading/Material.glsl"
#include "../../camera/Pinhole.glsl"
#include "../../geometry/Triangle.glsl"
#include "../../geometry/AABB.glsl"
#include "../../accelstruct/BVH/Traverse.glsl"

uniform CameraParameters Camera;

// Sky by builderboy
vec3 ComputeIncomingRadiance(in vec3 Direction) {
	float UpDot = Direction.y;
	const vec3 Coefficients =vec3(0.0625, 0.125, 0.25 ); //  0.1686, 0.4, 0.8667
	vec3 Color = Coefficients / (UpDot * UpDot + Coefficients);
	return Color;
}

uniform MeshSamplers Mesh;
uniform MaterialSamplers Material;
uniform BVHSamplers BVH;

vec3 ComputeColor(in vec2 PixelCoordinates){
    vec2 ScreenCoordinates = PixelCoordinates / vec2(gl_WorkGroupSize.xy * gl_NumWorkGroups.xy);
    vec3 Color = vec3(0.0f);

    Ray PrimaryRay;

    PrimaryRay.Origin    = Camera.Position;
    PrimaryRay.Direction = ComputeRayDirection(Camera, ScreenCoordinates);

    HitInfo IntersectionInfo;

    IntersectionInfo.Depth = 1.0e20f;

    bool HitResult = TraverseBVH(Mesh, BVH, PrimaryRay, IntersectionInfo);

    if(HitResult) {
        Vertex InterpolatedVertex = GetInterpolatedVertex(IntersectionInfo);

        Color = texture(Material.Diffuse, InterpolatedVertex.TextureCoordinate).rgb;

        // Reflection and refraction

        vec3 RefractedRay = refract(PrimaryRay.Direction, InterpolatedVertex.Normal, 1.0 / 1.333f);
        vec3 ReflectedRay = reflect(PrimaryRay.Direction, InterpolatedVertex.Normal);

        Color *= (ComputeIncomingRadiance(RefractedRay) + ComputeIncomingRadiance(ReflectedRay)) / 2.0f;
    } else {
        Color = ComputeIncomingRadiance(PrimaryRay.Direction);
    }

    // TODO: More accurate sRGB conversion
    Color = pow(Color, vec3(1.0f / 2.2f));

	return Color;
}

void main(){
	uvec2 PixelCoordinates = gl_GlobalInvocationID.xy;
    ivec2 StoreLocation = ivec2(PixelCoordinates);

    vec3 Color = ComputeColor(PixelCoordinates);

	//imageStore(ColorOutput, StoreLocation, vec4(Color, 0.0f));
}