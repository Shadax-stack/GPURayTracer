#version 430

#extension GL_ARB_bindless_texture : enable

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

#include "common/Geometry.glsl"
#include "common/BVH.glsl"
#include "common/Random.glsl"
#include "common/Constants.glsl"
#include "common/Util.glsl"
#include "common/Material.glsl"

uniform vec3 lower_left, horizontal, vertical, position, u, v;
uniform int width, height;
uniform float lens_radius;

uniform samplerBuffer lightTex;
uniform float totalLightArea;

uniform float kMetallic;
uniform float kRoughness;

uniform layout(rgba32f) image2D accum;

Vertex RandomPointOnLight() {
    float selectedArea = rand() * totalLightArea;

    #define BINARY_SEARCH
    #ifdef BINARY_SEARCH
    // a is lower bound, b is upper bound
    int a = 0, b = textureSize(lightTex) / 4 - 1;
    while(b > a) {
        int m = (a + b) / 2;
        float currArea = texelFetch(lightTex, 4 * m + 3).w;
        if(currArea > selectedArea)
            b = m; // We only know that m is *greater* than our target, so we cannot dismiss it via m - 1
        else
            a = m + 1; // We certainly know m cannot be it, so we set the bound to m + 1
    }
    int idx = 4 * a;
    #else
    int idx;
    for(idx = 0; idx <textureSize(lightTex); idx += 4) {
        float currArea = texelFetch(lightTex, idx + 3).w;
        if(currArea > selectedArea) break;
    }
    #endif

    vec4 data[4];

    data[0] = texelFetch(lightTex, idx    );
    data[1] = texelFetch(lightTex, idx + 1);
    data[2] = texelFetch(lightTex, idx + 2);
    data[3] = texelFetch(lightTex, idx + 3);

    vec3 position0, position1, position2;

    position0 =      data[0].xyz;
    position1 = vec3(data[0].w, data[1].xy);
    position2 = vec3(data[1].zw, data[2].x);

    // https://pharr.org/matt/blog/2019/02/27/triangle-sampling-1
    float sr = sqrt(rand());
    float u = 1 - sr;
    float v = rand() * sr;
    float t = 1.0f - u - v;

    Vertex lightVertex;

    lightVertex.Position              = position0 * u + position1 * v + position2 * t;
    lightVertex.Normal                = data[2].yzw;
    lightVertex.TextureCoordinate     = data[3].xy;
    lightVertex.MatID                 = fbs(data[3].z);

    return lightVertex;
}

float MISWeight(in float top, in float bottom) {
    // Assume for each path we send one nee and one indirect sample, factor out 0.5
    return (top) / (top + bottom);
}

float MISWeightBXDF(float bxdf, float cosine, float metallic) {
    return 0.0f;
}

void main() {
	// Begin by getting to know which pixel we are in	
	ivec2 PixelCoordinates = ivec2(gl_GlobalInvocationID.xy);
    initRNG(PixelCoordinates.y * width + PixelCoordinates.x);

	// Generate our ray
	Ray ray;

    vec2 interpolation = vec2(vec2(PixelCoordinates) + vec2(rand(), rand())) / (vec2(width, height));
    float phi = 2 * M_PI * rand(); 
    float r = sqrt(rand());

    vec2 rd = lens_radius * r * vec2(cos(phi), sin(phi));
    vec3 offset = u * rd.x + v * rd.y;

    ray.origin    = position + offset;
    ray.direction = normalize(lower_left + interpolation.s * horizontal + interpolation.t * vertical - offset);

    vec3 throughput = vec3(1.0);
    vec3 contribution = vec3(0.0);

    Vertex vertex;
    float bxdfPdf = 1.0;
    float neePdf = 1.0 / totalLightArea;

    vec3 viewDir = -ray.direction;

    vec3 lastPosition = ray.origin;

    // Set max bounce length to an inordinately high number so we (basically) get unbiased results while terminating the few odd rays that run for a lot of bounces without end
    const int kMaxBounces = 1024;
    for(int i = 0; i < kMaxBounces; i++) {
        // Intersect the scene
        HitInfo hit;
        hit.di.x = 1e20f;
        bool miss = !ClosestHit(ray, hit);
        vertex = GetInterpolatedVertex(ray, hit);
        if(miss) {
            vertex.MatID = 0;
        }

        // Account for L_e
        if(fbs(materialInstance[vertex.MatID + 1].w) == 1) {
            vec3 emission;
            if(vertex.MatID == 0) {
                emission = texture(samplerCube(fbu(materialInstance[0].xy)), ray.direction).xyz;
            } else {
                emission = materialInstance[vertex.MatID + 1].xyz;
                if(i != 0) {
                    float dist = distance(lastPosition, vertex.Position);
                    bxdfPdf *= nndot(vertex.Normal, viewDir) / (dist * dist);
                    throughput *= MISWeight(bxdfPdf, neePdf);
                }
            }
            contribution += throughput * emission;
            break; // No indirect lighting except for zeroth bounce
        }


        // Sample the texture
        vec3 albedo = texture(sampler2D(fbu(materialInstance[vertex.MatID].xy)), vertex.TextureCoordinate).xyz;

        Vertex lightVertex = RandomPointOnLight();
        float radius = distance(lightVertex.Position, vertex.Position); 
        vec3 lightDir = normalize(lightVertex.Position - vertex.Position);
        float bouncePdf = PdfBeckmann(kRoughness, vertex.Normal, viewDir, lightDir) * nndot(lightVertex.Normal, -lightDir) / (radius * radius); // Seach veach 1995, eq 9
        vec3 lightThroughput = BRDF(albedo, kMetallic, kRoughness, vertex.Normal, viewDir, lightDir) * throughput * nndot(vertex.Normal, lightDir) * nndot(lightVertex.Normal, -lightDir) * MISWeight(neePdf, bouncePdf) / (neePdf * radius * radius);
        HitInfo lightHit;
        lightHit.di.x = radius - 0.005f;
             
        Ray lightRay;
        lightRay.origin = vertex.Position + 0.001f * lightDir;
        lightRay.direction = lightDir;
                               
        if(!AnyHit(lightRay, lightHit)) {
            contribution += lightThroughput * materialInstance[lightVertex.MatID + 1].xyz;
        }

        // Construct a new ray
        vec3 normcrs = (abs(vertex.Normal.y) > 0.99 ? vec3(1.0, 0.0, 0.0) : vec3(0.0, 1.0, 0.0));
        vec3 tangent = normalize(cross(normcrs, vertex.Normal));
        vec3 bitangent = cross(tangent, vertex.Normal); 
        ray.origin = vertex.Position + 0.001 * vertex.Normal;
        ray.direction = reflect(-viewDir, normalize(mat3(tangent, bitangent, vertex.Normal) * BeckmannImportanceSample(kRoughness))); // mat3(tangent, bitangent, vertex.Normal) * ImportanceSampleCosine(bxdfPdf);//
        bxdfPdf = PdfBeckmann(kRoughness, vertex.Normal, viewDir, ray.direction);

        // Russian roulette
        throughput *= BRDF(albedo, kMetallic, kRoughness, vertex.Normal, viewDir, ray.direction) * nndot(vertex.Normal, ray.direction) / bxdfPdf; // terms cancel out when using cosine pdf
        float continuation = min(max(throughput.x, max(throughput.y, throughput.z)), 1.0f);
        if(rand() > continuation) {
            break;
        }
        throughput /= continuation;

        viewDir = -ray.direction;
        lastPosition = vertex.Position;
    }

    vec3 accumContribution = imageLoad(accum, PixelCoordinates).xyz + contribution;
    imageStore(accum, PixelCoordinates,vec4(accumContribution, 1.0));

    freeRNG();
}

/*
    vec3 testDir = normalize(vec3(1.0, 1.0, 0.0));
    
    vec2 polarCoords = interpolation * vec2(2 * M_PI, M_PI / 2);

    float yaw = polarCoords.x;
    float pitch = polarCoords.y;

    vec3 direction;
    direction.x = cos(pitch) *  sin(yaw);
	direction.y = sin(pitch);
	direction.z = cos(pitch) * -cos(yaw);

    contribution = SingleScatterCookTorrace(vec3(1.0), roughness, metallic, vec3(0.0, 1.0, 0.0), direction, testDir);
*/

/*
 // Intersect the scene
        HitInfo hit;
        hit.di.x = 1e20f;
        bool miss = !ClosestHit(ray, hit);
        vertex = GetInterpolatedVertex(ray, hit);
        if(miss) {
            vertex.MatID = 0;
        }

        // Account for L_e
        if(fbs(materialInstance[vertex.MatID + 1].w) == 1) {
            vec3 emission;
            if(miss) {
                emission = texture(samplerCube(floatBitsToUint(materialInstance[0].xy)), -viewDir).xyz;
            } else {
                emission = materialInstance[vertex.MatID + 1].xyz;
                float radius = distance(lastPosition, vertex.Position);
                float lightPdf = neePdf * radius * radius / max(dot(vertex.Normal, viewDir), 0.001f);
                throughput *= MISWeight(bxdfPdf, lightPdf);
            }
            contribution += throughput * emission;
            break; // Assume f_r for all surfaces where L_e != 0 is 0
        }


        // Sample the texture
        vec3 albedo = texture(sampler2D(floatBitsToUint(materialInstance[vertex.MatID].xy)), vertex.TextureCoordinate).xyz;

        vec3 lightPosition, lightNormal;
        RandomPointOnLight(lightPosition, lightNormal);
        float radius = distance(vertex.Position, lightPosition);
        vec3 lightDir = (lightPosition - vertex.Position) / radius;
        float lightPdf = neePdf * radius * radius / max(dot(lightNormal, -lightDir), 0.001f);
        vec3 lightThroughput = throughput * (albedo / M_PI) * max(dot(vertex.Normal, lightDir), 0.0f) * max(dot(lightNormal, -lightDir), 0.0f) * MISWeight(lightPdf, max(dot(vertex.Normal, lightDir) / M_PI, 0.0f)) / (lightPdf * radius * radius);
        float lightContinuation = min(max(lightThroughput.x, max(lightThroughput.y, lightThroughput.z)), 1.0f);
        if(rand() < lightContinuation) {
            lightThroughput /= lightContinuation;

            HitInfo lightHit;
            lightHit.di.x = 1e20f;
             
            Ray lightRay;
            lightRay.origin = vertex.Position + 0.001 * vertex.Normal;
            lightRay.direction = lightDir;
                               
            if(ClosestHit(lightRay, lightHit)) {
                Vertex lightVertex = GetInterpolatedVertex(lightRay, lightHit);
                if(distance(lightVertex.Position, lightPosition) < 0.1f) {
                    // We hit the light
                    contribution += lightThroughput * materialInstance[lightVertex.MatID + 1].xyz;

                }
            }
        }

        // Construct a new ray
        vec3 normcrs = (abs(vertex.Normal.y) > 0.99 ? vec3(1.0, 0.0, 0.0) : vec3(0.0, 1.0, 0.0));
        vec3 tangent = normalize(cross(normcrs, vertex.Normal));
        vec3 bitangent = cross(tangent, vertex.Normal); 
        ray.origin = vertex.Position + 0.001 * vertex.Normal;
        ray.direction = mat3(tangent, bitangent, vertex.Normal) * ImportanceSampleCosine(bxdfPdf);

        // Russian roulette
        throughput *= albedo;// / M_PI *  max(dot(vertex.Normal, ray.direction), 0.0f) / bxdfPdf;
        float continuation = min(max(throughput.x, max(throughput.y, throughput.z)), 1.0f);
        if(rand() > continuation) {
            break;
        }
        throughput /= continuation;

        viewDir = -ray.direction;
        lastPosition = vertex.Position;
*/