#version 430

vec3 debugColor = vec3(0.0f);

#extension GL_ARB_bindless_texture : enable

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

#include "common/Geometry.glsl"
#include "common/BVH.glsl"
#include "common/Random.glsl"
#include "common/Constants.glsl"
#include "common/Util.glsl"
#include "common/Material.glsl"
#include "common/Microfacet.glsl"
#include "common/BSDF.glsl"
#include "common/MIS.glsl"

uniform vec3 lower_left, horizontal, vertical, position, u, v;
uniform int width, height;
uniform float lens_radius;

uniform samplerBuffer lightTex;
uniform float totalLightArea;

uniform float kMetallic;
 
uniform layout(rgba32f) image2D accum;

// I will eventually need to move away from global vars
vec3 viewDir;

Vertex RandomLightVertex() {
    float selectedArea = rand() * totalLightArea;
    vec2 data;

    // a is lower bound, b is upper bound
    #define BINARY_SEARCH
    #ifdef BINARY_SEARCH
    // Until I get this working
    int a = 0, b = textureSize(lightTex) - 1;
    while(b > a) {
        int m = (a + b) / 2;
        data = texelFetch(lightTex, m).xy; // Reading the who thing instead of just .x is not more expensive because of how GPUs work
        if(data.x > selectedArea)
            b = m; // We only know that m is *greater* than our target, so we cannot dismiss it via m - 1
        else
            a = m + 1; // We certainly know m cannot be it, so we set the bound to m + 1
    }

    #else
    for(int i = 0; i < textureSize(lightTex); i++) {
        data = texelFetch(lightTex, i).xy;
        if(data.x > selectedArea) {
            break;
        }
    }
    #endif

    CompactTriangle triangle = ReadCompactTriangle(fbs(data.y));
    // Recompute world space points
    triangle.position1 += triangle.position0;
    triangle.position2 += triangle.position0;

    vec2 r = rand2();

    // https://pharr.org/matt/blog/2019/02/27/triangle-sampling-1
    float sr = sqrt(r.x);
    float u = 1 - sr;
    float v = r.y * sr;
    float t = 1.0f - u - v;

    Vertex lightVertex;

    lightVertex.Position = triangle.position0 * u + triangle.position1 * v + triangle.position2 * t;
    lightVertex.TextureCoordinate = triangle.texcoord0 * u + triangle.texcoord1 * v + triangle.texcoord2 * t;
    lightVertex.Normal = triangle.normal;
    lightVertex.MatID = triangle.material;

    return lightVertex;
}

// I make the assumption that the sun is a disk with its center just 1 unit away from the vertex
// We can calculate our sampled point via c + tbn * (random 2d point within a unit circle * radius, 0.0f)
// Where c is the center of our disk, tbn is its coordinate system, and radius is the radius of the disk, which can easily be obtained from the tanget of a angular radius parameter
// But this is a very hacky and bad solution, ideally you want to solid angle sample a cone
// For more details, see "Monte Carlo Techniques for Direct Lighting Calculations" by Shirley et al.
uniform vec3 sunDir;// = normalize(vec3(2.0f, 9.0f, 12.0f));
uniform float sunRadius;// = 0.05f;
uniform float sunMaxDot;
float sunArea = M_PI * sunRadius * sunRadius;
Vertex RandomSunVertex(in Vertex vertex) {
    mat3 sunTBN = ConstructTBN(-sunDir);

    vec2 r = rand2();

    float radius = sunRadius * sqrt(r.x);
    float phi = 2 * M_PI * r.y;

    vec3 diskPosition = vec3(radius * vec2(cos(phi), sin(phi)), 0.0f);

    Vertex sunVertex;

    sunVertex.Position = vertex.Position + sunDir + sunTBN * diskPosition; 
    sunVertex.Normal = -sunDir;
    sunVertex.MatID = 0;

    return sunVertex;
}

// TODO: rewrite MIS
Ray GenerateLightSample(in Vertex vertex, in MaterialInstance material, in SurfaceInteraction interaction, out HitInfo lightHit, out float lightPdf, in vec3 throughput, out vec3 lightThroughput, out uint lightMatID) { 
    Vertex lightVertex;

    #ifdef SUN_LIGHT
    float lightPick = rand();
    if(lightPick > 0.5f) {
        lightVertex = RandomLightVertex();
        lightPdf = 0.5f / totalLightArea;
        lightHit.di.x = distance(lightVertex.Position, vertex.Position) - 0.005f;
    } else {
        lightVertex = RandomSunVertex(vertex);
        lightPdf = 0.5f / sunArea;
        lightHit.di.x = 1e20f;//radius - 0.005f;
    }
    #else
    lightVertex = RandomLightVertex();
    lightPdf = 1.0f / totalLightArea;
    lightHit.di.x = distance(lightVertex.Position, vertex.Position) - 0.005f;
    #endif

    Ray lightRay;  

    float radius = distance(lightVertex.Position, vertex.Position); 
    vec3 lightDir = normalize(lightVertex.Position - vertex.Position); 
    SetIncomingDirection(interaction, lightDir);
    float bouncePdf = ProbabilityDensityDirection(material, interaction) * avdot(lightVertex.Normal, -lightDir) / (radius * radius); // Seach veach 1995, eq 9
    lightThroughput = throughput * ComputeBSDF(material, interaction) * interaction.ndi * avdot(lightVertex.Normal, -lightDir) * MISWeight(lightPdf, bouncePdf) / (lightPdf * radius * radius);
              
    lightRay.origin = vertex.Position + 0.001f * vertex.Normal;
    lightRay.direction = lightDir;

    lightMatID = lightVertex.MatID;

    return lightRay;
}

vec3 PathTrace(in ivec2 pixel) {
    uint idx = pixel.y * width + pixel.x;
    initRNG(idx);

	// Generate our ray
	Ray ray;

    vec2 interpolation = (pixel + rand2()) / vec2(width, height);

    vec2 r = rand2();
    float phi = 2 * M_PI * r.y; 
    float radius = sqrt(r.x);
    vec2 rd = lens_radius * r * vec2(cos(phi), sin(phi));
    vec3 offset = u * rd.x + v * rd.y;

    ray.origin    = position + offset;
    ray.direction = normalize(lower_left + interpolation.s * horizontal + interpolation.t * vertical - offset);

    vec3 throughput = vec3(1.0);
    vec3 contribution = vec3(0.0);

    Vertex vertex;
    float bxdfPdf0 = 1.0, bxdfPdf1 = 1.0f;
    float neePdf = 0.5f / totalLightArea;

    // TODO: clean up variable names
    viewDir = -ray.direction;
    vec3 lastPosition = ray.origin;

    // Set max bounce length to an inordinately high number so we (basically) get unbiased results while terminating the few odd rays that run for a lot of bounces without end
    const int kMaxBounces = 64;
    for(int i = 0; i < kMaxBounces; i++) {
        // Intersect the scene
        HitInfo hit;
        hit.di.x = 1e20f;
        bool miss = !IfIfClosestHit(ray, hit);

        vertex = GetInterpolatedVertex(ray, hit);
        vertex.Position = vertex.Position + 0.003f * vertex.Normal;
        if(miss) {
            vertex.MatID = 0;
        } 

        MaterialInstance material = ConstructMaterialInstance(vertex.MatID, vertex.TextureCoordinate);
        SurfaceInteraction interaction = ConstructSurfaceInteraction(vertex.Normal, viewDir);

        // Account for L_e
        vec3 indirectDirectThroughput = throughput;
        if(miss) {
            // TODO: figure out how to factor in sunlight here
            // I think that we would have to weight the skybox and sunlight differently
            // At least energy loss is minimal atm and I can wait until I do away with area sampling and get into solid angle sampling stuff
            material.emission = texture(samplerCube(fbu(materialInstance[0].xy)), ray.direction).xyz;
            indirectDirectThroughput = throughput;
        } else if(i != 0){
            float dist = distance(lastPosition, vertex.Position);
            float oldMis = MISWeight(bxdfPdf0, bxdfPdf1);
            bxdfPdf0 *= 0.5f * avdot(vertex.Normal, viewDir) / (dist * dist);
            bxdfPdf1 *= 0.5f * avdot(vertex.Normal, viewDir) / (dist * dist);
            indirectDirectThroughput = (throughput / oldMis) * bxdfPdf0 / (bxdfPdf0 + bxdfPdf1 + neePdf);
        }
        contribution += indirectDirectThroughput * material.emission;

        if(i == 0) {
            contribution += indirectDirectThroughput * material.emission;
        }

        if(miss) {
            break; 
        }

        HitInfo lightHit;
        vec3 lightThroughput;
        uint lightMatID;
        float lightPdf;

        Ray lightRay = GenerateLightSample(vertex, material, interaction, lightHit, lightPdf, throughput, lightThroughput, lightMatID);     
        if(!IfIfAnyHit(lightRay, lightHit)) {
            contribution += lightThroughput * materialInstance[lightMatID + 1].xyz;
        }

        ray.direction = GenerateImportanceSample(material, interaction, bxdfPdf0, bxdfPdf1);

        // Russian roulette
        throughput *= ComputeBSDF(material, interaction) * interaction.ndi * MISWeight(bxdfPdf0, bxdfPdf1) / bxdfPdf0; // We multiply the PDF by 0.5 since we had a 50/50 percent chance of choosing it
        float continuation = min(max(throughput.x, max(throughput.y, throughput.z)), 1.0f);
        if(rand() > continuation) {
            break;
        }
        throughput /= continuation;                

        viewDir = -ray.direction;
        lastPosition = vertex.Position;
        ray.origin = vertex.Position; 
    }

    freeRNG();

    return contribution;
}

int Compact1By1(int x) {
    x &= 0x55555555;
    x = (x ^ (x >> 1)) & 0x33333333;
    x = (x ^ (x >> 2)) & 0x0f0f0f0f;
    x = (x ^ (x >> 4)) & 0x00ff00ff;
    x = (x ^ (x >> 8)) & 0x0000ffff;
    return x;
}

ivec2 RayIndexToMorton(int idx) { // 22.6449
    int i = idx % 64;
    ivec2 morton = ivec2(Compact1By1(i), Compact1By1(i >> 1));

    int j = idx / 64;
    int x = j % (width / 8);
    int y = j / (width / 8);

    return morton + 8 * ivec2(x, y);
}

// Persistent threads, by Alia et al 2009

// Use texture for random ordering of pixels, such as morton order
// uniform isamplerBuffer pixelPoolTex;

// GLSL has issues with volatile memeory, so we need to use memoryBarrierShared() instead
shared uint nextRay[gl_WorkGroupSize.y];
shared uint rayCount[gl_WorkGroupSize.y];

const uint batchPortion = gl_WorkGroupSize.x;
const uint batchSize = 1 * batchPortion; // make sure that this is a multiple of gl_WorkGroupSize.x. Aila and Laine 2009 used 3 as the multiplier
const uint globalRayCount = width * height;

layout(std430) buffer globalNextRayBuf {
    uint globalNextRay;
};

void main() {  
#define PRESISTENT_THREADS
#ifdef PRESISTENT_THREADS
    uvec2 threadIdx =  gl_LocalInvocationID.xy;

    // Initialize all to zero
    if(threadIdx.x == 0) {
        rayCount[threadIdx.y] = batchPortion;
    }

    while(true) {
        if(threadIdx.x == 0) {
            nextRay[threadIdx.y] += batchPortion;
            rayCount[threadIdx.y] -= batchPortion;
            if(rayCount[threadIdx.y] == 0) {
                nextRay[threadIdx.y] = atomicAdd(globalNextRay, batchSize);
                rayCount[threadIdx.y] = batchSize;
            }
            memoryBarrierShared();
        }
        uint rayIndex = nextRay[threadIdx.y] + threadIdx.x;
        if(rayIndex >= globalRayCount) {
            break;
        }
        ivec2 pixel = RayIndexToMorton(int(rayIndex));// texelFetch(pixelPoolTex, int(rayIndex)).xy;
        vec3 color = PathTrace(pixel);
        imageStore(accum, pixel, vec4(imageLoad(accum, pixel).xyz + color, 1.0));
    }
#else
    ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
    vec3 color = PathTrace(pixel);
    imageStore(accum, pixel, vec4(imageLoad(accum, pixel).xyz + color, 1.0));
#endif
}

/*
    vec3 testDir = normalize(vec3(1.0, 1.0, 0.0));
    
    vec2 polarCoords = interpolation * vec2(2 * M_PI, M_PI / 2);

    float yaw = polarCoords.x;
    float pitch = polarCoords.y;

    vec3 direction;
    direction.x = cos(pitch) *  sin(yaw);
	direction.y = sin(pitch);
	direction.z = cos(pitch) * -cos(yaw);

    contribution = SingleScatterCookTorrace(vec3(1.0), roughness, metallic, vec3(0.0, 1.0, 0.0), direction, testDir);
*/

/*
 // Intersect the scene
        HitInfo hit;
        hit.di.x = 1e20f;
        bool miss = !ClosestHit(ray, hit);
        vertex = GetInterpolatedVertex(ray, hit);
        if(miss) {
            vertex.MatID = 0;
        }

        // Account for L_e
        if(fbs(materialInstance[vertex.MatID + 1].w) == 1) {
            vec3 emission;
            if(miss) {
                emission = texture(samplerCube(floatBitsToUint(materialInstance[0].xy)), -viewDir).xyz;
            } else {
                emission = materialInstance[vertex.MatID + 1].xyz;
                float radius = distance(lastPosition, vertex.Position);
                float lightPdf = neePdf * radius * radius / max(dot(vertex.Normal, viewDir), 0.001f);
                throughput *= MISWeight(bxdfPdf, lightPdf);
            }
            contribution += throughput * emission;
            break; // Assume f_r for all surfaces where L_e != 0 is 0
        }


        // Sample the texture
        vec3 albedo = texture(sampler2D(floatBitsToUint(materialInstance[vertex.MatID].xy)), vertex.TextureCoordinate).xyz;

        vec3 lightPosition, lightNormal;
        RandomPointOnLight(lightPosition, lightNormal);
        float radius = distance(vertex.Position, lightPosition);
        vec3 lightDir = (lightPosition - vertex.Position) / radius;
        float lightPdf = neePdf * radius * radius / max(dot(lightNormal, -lightDir), 0.001f);
        vec3 lightThroughput = throughput * (albedo / M_PI) * max(dot(vertex.Normal, lightDir), 0.0f) * max(dot(lightNormal, -lightDir), 0.0f) * MISWeight(lightPdf, max(dot(vertex.Normal, lightDir) / M_PI, 0.0f)) / (lightPdf * radius * radius);
        float lightContinuation = min(max(lightThroughput.x, max(lightThroughput.y, lightThroughput.z)), 1.0f);
        if(rand() < lightContinuation) {
            lightThroughput /= lightContinuation;

            HitInfo lightHit;
            lightHit.di.x = 1e20f;
             
            Ray lightRay;
            lightRay.origin = vertex.Position + 0.001 * vertex.Normal;
            lightRay.direction = lightDir;
                               
            if(ClosestHit(lightRay, lightHit)) {
                Vertex lightVertex = GetInterpolatedVertex(lightRay, lightHit);
                if(distance(lightVertex.Position, lightPosition) < 0.1f) {
                    // We hit the light
                    contribution += lightThroughput * materialInstance[lightVertex.MatID + 1].xyz;

                }
            }
        }

        // Construct a new ray
        vec3 normcrs = (abs(vertex.Normal.y) > 0.99 ? vec3(1.0, 0.0, 0.0) : vec3(0.0, 1.0, 0.0));
        vec3 tangent = normalize(cross(normcrs, vertex.Normal));
        vec3 bitangent = cross(tangent, vertex.Normal); 
        ray.origin = vertex.Position + 0.001 * vertex.Normal;
        ray.direction = mat3(tangent, bitangent, vertex.Normal) * ImportanceSampleCosine(bxdfPdf);

        // Russian roulette
        throughput *= albedo;// / M_PI *  max(dot(vertex.Normal, ray.direction), 0.0f) / bxdfPdf;
        float continuation = min(max(throughput.x, max(throughput.y, throughput.z)), 1.0f);
        if(rand() > continuation) {
            break;
        }
        throughput /= continuation;

        viewDir = -ray.direction;
        lastPosition = vertex.Position;
*/